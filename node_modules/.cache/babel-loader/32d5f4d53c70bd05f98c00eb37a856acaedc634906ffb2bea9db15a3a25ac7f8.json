{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as poseDetection from '@tensorflow-models/pose-detection';\nimport * as tf from '@tensorflow/tfjs-core';\nconst color = \"aqua\";\nconst boundingBoxColor = \"red\";\nconst lineWidth = 2;\nexport const tryResNetButtonName = \"tryResNetButton\";\nexport const tryResNetButtonText = \"[New] Try ResNet50\";\nconst tryResNetButtonTextCss = \"width:100%;text-decoration:underline;\";\nconst tryResNetButtonBackgroundCss = \"background:#e61d5f;\";\nfunction isAndroid() {\n  return /Android/i.test(navigator.userAgent);\n}\nfunction isiOS() {\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent);\n}\nexport function isMobile() {\n  return isAndroid() || isiOS();\n}\nfunction setDatGuiPropertyCss(propertyText, liCssString) {\n  let spanCssString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  var spans = document.getElementsByClassName(\"property-name\");\n  for (var i = 0; i < spans.length; i++) {\n    var text = spans[i].textContent || spans[i].innerText;\n    if (text == propertyText) {\n      spans[i].parentNode.parentNode.style = liCssString;\n      if (spanCssString !== \"\") {\n        spans[i].style = spanCssString;\n      }\n    }\n  }\n}\nexport function updateTryResNetButtonDatGuiCss() {\n  setDatGuiPropertyCss(tryResNetButtonText, tryResNetButtonBackgroundCss, tryResNetButtonTextCss);\n}\n\n/**\n * Toggles between the loading UI and the main canvas UI.\n */\nexport function toggleLoadingUI(showLoadingUI) {\n  let loadingDivId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"loading\";\n  let mainDivId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"main\";\n  if (showLoadingUI) {\n    document.getElementById(loadingDivId).style.display = \"block\";\n    document.getElementById(mainDivId).style.display = \"none\";\n  } else {\n    document.getElementById(loadingDivId).style.display = \"none\";\n    document.getElementById(mainDivId).style.display = \"block\";\n  }\n}\nfunction toTuple(_ref) {\n  let {\n    y,\n    x\n  } = _ref;\n  return [y, x];\n}\nexport function drawPoint(ctx, y, x, r, color) {\n  ctx.beginPath();\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\n  ctx.fillStyle = color;\n  ctx.fill();\n}\n\n/**\n * Draws a line on a canvas, i.e. a joint\n */\nexport function drawSegment(_ref2, _ref3, color, scale, ctx) {\n  let [ay, ax] = _ref2;\n  let [by, bx] = _ref3;\n  console.log(ay);\n  ctx.beginPath();\n  ctx.moveTo(ax * scale, ay * scale);\n  ctx.lineTo(bx * scale, by * scale);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = color;\n  ctx.stroke();\n}\n\n/**\n * Draws a pose skeleton by looking up all adjacent keypoints/joints\n */\nexport function drawSkeleton(keypoints, minConfidence, ctx) {\n  let scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  const adjacentKeyPoints = poseDetection.util.getAdjacentPairs(poseDetection.SupportedModels.MoveNet);\n  //console.log(keypoints[0].score)\n  adjacentKeyPoints.forEach(_ref4 => {\n    let [i, j] = _ref4;\n    const kp1 = keypoints[i];\n    const kp2 = keypoints[j];\n    console.log(j);\n    const score1 = kp1.score != null ? kp1.score : 1;\n    const score2 = kp2.score != null ? kp2.score : 1;\n    const scoreThreshold = 0.2;\n    if (score1 >= scoreThreshold && score2 >= scoreThreshold) {\n      ctx.beginPath();\n      ctx.moveTo(kp1.x, kp1.y);\n      ctx.lineTo(kp2.x, kp2.y);\n      ctx.strokeStyle = color;\n      ctx.stroke();\n    }\n    /*\n    drawSegment(\n    toTuple(keypoints[0]),\n    toTuple(keypoints[1]),\n    color,\n    scale,\n    ctx\n    );\n    */\n  });\n}\n\n/**\n * Draw pose keypoints onto a canvas\n */\nexport function drawKeypoints(keypoints, minConfidence, ctx) {\n  let scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  for (let i = 0; i < keypoints.length; i++) {\n    const keypoint = keypoints[i];\n    if (keypoint.score < minConfidence) {\n      continue;\n    }\n    //console.log(keypoint)\n    const {\n      y,\n      x\n    } = keypoint;\n    drawPoint(ctx, y * scale, x * scale, 3, color);\n  }\n}\n\n/**\n * Draw the bounding box of a pose. For example, for a whole person standing\n * in an image, the bounding box will begin at the nose and extend to one of\n * ankles\n */\n\n/**\n * Converts an arary of pixel data into an ImageData object\n */\nexport async function renderToCanvas(a, ctx) {\n  const [height, width] = a.shape;\n  const imageData = new ImageData(width, height);\n  const data = await a.data();\n  for (let i = 0; i < height * width; ++i) {\n    const j = i * 4;\n    const k = i * 3;\n    imageData.data[j + 0] = data[k + 0];\n    imageData.data[j + 1] = data[k + 1];\n    imageData.data[j + 2] = data[k + 2];\n    imageData.data[j + 3] = 255;\n  }\n  ctx.putImageData(imageData, 0, 0);\n}\n\n/**\n * Draw an image on a canvas\n */\nexport function renderImageToCanvas(image, size, canvas) {\n  canvas.width = size[0];\n  canvas.height = size[1];\n  const ctx = canvas.getContext(\"2d\");\n  ctx.drawImage(image, 0, 0);\n}\n\n/**\n * Draw heatmap values, one of the model outputs, on to the canvas\n * Read our blog post for a description of PoseNet's heatmap outputs\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\n */\nexport function drawHeatMapValues(heatMapValues, outputStride, canvas) {\n  const ctx = canvas.getContext(\"2d\");\n  const radius = 5;\n  const scaledValues = heatMapValues.mul(tf.scalar(outputStride, \"int32\"));\n  drawPoints(ctx, scaledValues, radius, color);\n}\n\n/**\n * Used by the drawHeatMapValues method to draw heatmap points on to\n * the canvas\n */\nfunction drawPoints(ctx, points, radius, color) {\n  const data = points.buffer().values;\n  for (let i = 0; i < data.length; i += 2) {\n    const pointY = data[i];\n    const pointX = data[i + 1];\n    if (pointX !== 0 && pointY !== 0) {\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, radius, 0, 2 * Math.PI);\n      ctx.fillStyle = color;\n      ctx.fill();\n    }\n  }\n}\n\n/**\n * Draw offset vector values, one of the model outputs, on to the canvas\n * Read our blog post for a description of PoseNet's offset vector outputs\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\n */\n// export function drawOffsetVectors(\n//     heatMapValues, offsets, outputStride, scale = 1, ctx) {\n//   const offsetPoints =\n//       posenet.singlePose.getOffsetPoints(heatMapValues, outputStride, offsets);\n\n//   const heatmapData = heatMapValues.buffer().values;\n//   const offsetPointsData = offsetPoints.buffer().values;\n\n//   for (let i = 0; i < heatmapData.length; i += 2) {\n//     const heatmapY = heatmapData[i] * outputStride;\n//     const heatmapX = heatmapData[i + 1] * outputStride;\n//     const offsetPointY = offsetPointsData[i];\n//     const offsetPointX = offsetPointsData[i + 1];\n\n//     drawSegment(\n//         [heatmapY, heatmapX], [offsetPointY, offsetPointX], color, scale, ctx);\n//   }\n// }","map":{"version":3,"names":["poseDetection","tf","color","boundingBoxColor","lineWidth","tryResNetButtonName","tryResNetButtonText","tryResNetButtonTextCss","tryResNetButtonBackgroundCss","isAndroid","test","navigator","userAgent","isiOS","isMobile","setDatGuiPropertyCss","propertyText","liCssString","spanCssString","spans","document","getElementsByClassName","i","length","text","textContent","innerText","parentNode","style","updateTryResNetButtonDatGuiCss","toggleLoadingUI","showLoadingUI","loadingDivId","mainDivId","getElementById","display","toTuple","y","x","drawPoint","ctx","r","beginPath","arc","Math","PI","fillStyle","fill","drawSegment","scale","ay","ax","by","bx","console","log","moveTo","lineTo","strokeStyle","stroke","drawSkeleton","keypoints","minConfidence","adjacentKeyPoints","util","getAdjacentPairs","SupportedModels","MoveNet","forEach","j","kp1","kp2","score1","score","score2","scoreThreshold","drawKeypoints","keypoint","renderToCanvas","a","height","width","shape","imageData","ImageData","data","k","putImageData","renderImageToCanvas","image","size","canvas","getContext","drawImage","drawHeatMapValues","heatMapValues","outputStride","radius","scaledValues","mul","scalar","drawPoints","points","buffer","values","pointY","pointX"],"sources":["/Users/davidjaehrling/Desktop/Bachelor/JS-WebApp/from_scratch/src/utilities.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as poseDetection from '@tensorflow-models/pose-detection';\nimport * as tf from '@tensorflow/tfjs-core';\n\nconst color = \"aqua\";\nconst boundingBoxColor = \"red\";\nconst lineWidth = 2;\n\nexport const tryResNetButtonName = \"tryResNetButton\";\nexport const tryResNetButtonText = \"[New] Try ResNet50\";\nconst tryResNetButtonTextCss = \"width:100%;text-decoration:underline;\";\nconst tryResNetButtonBackgroundCss = \"background:#e61d5f;\";\n\nfunction isAndroid() {\n  return /Android/i.test(navigator.userAgent);\n}\n\nfunction isiOS() {\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent);\n}\n\nexport function isMobile() {\n  return isAndroid() || isiOS();\n}\n\nfunction setDatGuiPropertyCss(propertyText, liCssString, spanCssString = \"\") {\n  var spans = document.getElementsByClassName(\"property-name\");\n  for (var i = 0; i < spans.length; i++) {\n    var text = spans[i].textContent || spans[i].innerText;\n    if (text == propertyText) {\n      spans[i].parentNode.parentNode.style = liCssString;\n      if (spanCssString !== \"\") {\n        spans[i].style = spanCssString;\n      }\n    }\n  }\n}\n\nexport function updateTryResNetButtonDatGuiCss() {\n  setDatGuiPropertyCss(\n    tryResNetButtonText,\n    tryResNetButtonBackgroundCss,\n    tryResNetButtonTextCss\n  );\n}\n\n/**\n * Toggles between the loading UI and the main canvas UI.\n */\nexport function toggleLoadingUI(\n  showLoadingUI,\n  loadingDivId = \"loading\",\n  mainDivId = \"main\"\n) {\n  if (showLoadingUI) {\n    document.getElementById(loadingDivId).style.display = \"block\";\n    document.getElementById(mainDivId).style.display = \"none\";\n  } else {\n    document.getElementById(loadingDivId).style.display = \"none\";\n    document.getElementById(mainDivId).style.display = \"block\";\n  }\n}\nfunction toTuple({ y, x }) {\n  return [y, x];\n}\n\nexport function drawPoint(ctx, y, x, r, color) {\n  ctx.beginPath();\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\n  ctx.fillStyle = color;\n  ctx.fill();\n}\n\n/**\n * Draws a line on a canvas, i.e. a joint\n */\nexport function drawSegment([ay, ax], [by, bx], color, scale, ctx) {\n  console.log(ay)\n  ctx.beginPath();\n  ctx.moveTo(ax * scale, ay * scale);\n  ctx.lineTo(bx * scale, by * scale);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = color;\n  ctx.stroke();\n}\n\n/**\n * Draws a pose skeleton by looking up all adjacent keypoints/joints\n */\nexport function drawSkeleton(keypoints, minConfidence, ctx, scale = 1) {\n\n  const adjacentKeyPoints = poseDetection.util.getAdjacentPairs(poseDetection.SupportedModels.MoveNet);\n  //console.log(keypoints[0].score)\n  adjacentKeyPoints.forEach(([i, j]) => {\n\n    const kp1 = keypoints[i];\n    const kp2 = keypoints[j]; \n    console.log(j)\n\n    const score1 = kp1.score != null ? kp1.score : 1;\n    const score2 = kp2.score != null ? kp2.score : 1;\n    const scoreThreshold = 0.2;\n\n    if (score1 >= scoreThreshold && score2 >= scoreThreshold) {\n      ctx.beginPath();\n      ctx.moveTo(kp1.x, kp1.y);\n      ctx.lineTo(kp2.x, kp2.y);\n      ctx.strokeStyle = color;\n      ctx.stroke();\n      }\n      /*\n    drawSegment(\n      toTuple(keypoints[0]),\n      toTuple(keypoints[1]),\n      color,\n      scale,\n      ctx\n    );\n    */\n  });\n}\n\n/**\n * Draw pose keypoints onto a canvas\n */\nexport function drawKeypoints(keypoints, minConfidence, ctx, scale = 1) {\n  \n  for (let i = 0; i < keypoints.length; i++) {\n    const keypoint = keypoints[i];\n\n    if (keypoint.score < minConfidence) {\n      continue;\n    }\n    //console.log(keypoint)\n    const { y, x } = keypoint;\n\n\n    drawPoint(ctx, y * scale, x * scale, 3, color);\n  }\n}\n\n/**\n * Draw the bounding box of a pose. For example, for a whole person standing\n * in an image, the bounding box will begin at the nose and extend to one of\n * ankles\n */\n\n\n/**\n * Converts an arary of pixel data into an ImageData object\n */\nexport async function renderToCanvas(a, ctx) {\n  const [height, width] = a.shape;\n  const imageData = new ImageData(width, height);\n\n  const data = await a.data();\n\n  for (let i = 0; i < height * width; ++i) {\n    const j = i * 4;\n    const k = i * 3;\n\n    imageData.data[j + 0] = data[k + 0];\n    imageData.data[j + 1] = data[k + 1];\n    imageData.data[j + 2] = data[k + 2];\n    imageData.data[j + 3] = 255;\n  }\n\n  ctx.putImageData(imageData, 0, 0);\n}\n\n/**\n * Draw an image on a canvas\n */\nexport function renderImageToCanvas(image, size, canvas) {\n  canvas.width = size[0];\n  canvas.height = size[1];\n  const ctx = canvas.getContext(\"2d\");\n\n  ctx.drawImage(image, 0, 0);\n}\n\n/**\n * Draw heatmap values, one of the model outputs, on to the canvas\n * Read our blog post for a description of PoseNet's heatmap outputs\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\n */\nexport function drawHeatMapValues(heatMapValues, outputStride, canvas) {\n  const ctx = canvas.getContext(\"2d\");\n  const radius = 5;\n  const scaledValues = heatMapValues.mul(tf.scalar(outputStride, \"int32\"));\n\n  drawPoints(ctx, scaledValues, radius, color);\n}\n\n/**\n * Used by the drawHeatMapValues method to draw heatmap points on to\n * the canvas\n */\nfunction drawPoints(ctx, points, radius, color) {\n  const data = points.buffer().values;\n\n  for (let i = 0; i < data.length; i += 2) {\n    const pointY = data[i];\n    const pointX = data[i + 1];\n\n    if (pointX !== 0 && pointY !== 0) {\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, radius, 0, 2 * Math.PI);\n      ctx.fillStyle = color;\n      ctx.fill();\n    }\n  }\n}\n\n/**\n * Draw offset vector values, one of the model outputs, on to the canvas\n * Read our blog post for a description of PoseNet's offset vector outputs\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\n */\n// export function drawOffsetVectors(\n//     heatMapValues, offsets, outputStride, scale = 1, ctx) {\n//   const offsetPoints =\n//       posenet.singlePose.getOffsetPoints(heatMapValues, outputStride, offsets);\n\n//   const heatmapData = heatMapValues.buffer().values;\n//   const offsetPointsData = offsetPoints.buffer().values;\n\n//   for (let i = 0; i < heatmapData.length; i += 2) {\n//     const heatmapY = heatmapData[i] * outputStride;\n//     const heatmapX = heatmapData[i + 1] * outputStride;\n//     const offsetPointY = offsetPointsData[i];\n//     const offsetPointX = offsetPointsData[i + 1];\n\n//     drawSegment(\n//         [heatmapY, heatmapX], [offsetPointY, offsetPointX], color, scale, ctx);\n//   }\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}